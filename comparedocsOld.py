import pdfplumber
import pytesseract
from pdf2image import convert_from_path
import re
import json
import os

FIELDS_TEMPLATE = {
    "–ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø": None,
    "–ú–ê–†–ö–ê": None,
    "–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï": None,
    "–¢–ò–ü": None,
    "–®–ê–°–°–ò": None, 
    "–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–† (VIN)": None,  
    "–ì–û–î –í–´–ü–£–°–ö–ê": None,  
    "–ö–ê–¢–ï–ì–û–†–ò–Ø": None,
    "–≠–ö–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ö–õ–ê–°–°": None,
    "–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°": None,
    "–ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°": None,
    "–°–ë–û–†–û–ß–ù–´–ô –ó–ê–í–û–î –ò –ï–ì–û –ê–î–†–ï–°": None,
    "–ö–æ–ª–µ—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞/–≤–µ–¥—É—â–∏–µ –∫–æ–ª–µ—Å–∞": None,  
    "–°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞": None,
    "–¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)": None,
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/ c–∑–∞–¥–∏ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)": None,
    "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)": None,
    "–ö–∞–±–∏–Ω–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)": None, 
    "–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, –ú3)": None,
    "–û–±—â–∏–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú3 –∫–ª–∞—Å—Å–∞ III)": None,
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, M3, L)": None,
    "–†–∞–º–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L)": None,
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π/–∫–æ–ª–µ—Å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û)": None, 
    "–ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–≥": None,
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–≥": None,
    "–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º": {"–¥–ª–∏–Ω–∞": None, "—à–∏—Ä–∏–Ω–∞": None, "–≤—ã—Å–æ—Ç–∞": None},
    "–ë–∞–∑–∞, –º–º": None,
    "–ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º": None,
    "–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞": None,
    "–î–≤–∏–≥–∞—Ç–µ–ª—å": None,
    "–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–≥–æ—Ä–∞–Ω–∏—è (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤": None,
    "- —Ä–∞–±–æ—á–∏–π –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–º3": None,
    "- —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è": None,
    "- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (–º–∏–Ω.-1)": None,
    "–¢–æ–ø–ª–∏–≤–æ": None,
    "–°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è (—Ç–∏–ø)": None,
    "–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è (—Ç–∏–ø)": None,
    "–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –≥–∞–∑–æ–≤": None,
    "–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è": None,
    "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í": None,
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç": None,
    "–í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã": None,
    "–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)": None,
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)": None,
    "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏": None,
    "–°—Ü–µ–ø–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è": None,
    "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "–†–µ–¥—É–∫—Ç–æ—Ä": None,
    "–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)": {"–ø–µ—Ä–µ–¥–Ω—è—è": None, "–∑–∞–¥–Ω—è—è": None},
    "–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)": {"—Ä–∞–±–æ—á–∞—è": None, "–∑–∞–ø–∞—Å–Ω–∞—è": None, "—Å—Ç–æ—è–Ω–æ—á–Ω–∞—è": None},
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞": None,
    "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è": None,
    "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø": None

}

def extract_text_pdfplumber(file_path):
    text = ""
    with pdfplumber.open(file_path) as pdf:
        for page in pdf.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"
    return text

def extract_text_ocr(file_path):
    images = convert_from_path(file_path)
    text = ""
    for img in images:
        text += pytesseract.image_to_string(img, lang="rus") + "\n"
    return text

def clean_text(text):
    """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    return re.sub(r"\s+", " ", text.strip())

def is_header(line):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    headers = [
        "–ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø", "–ú–ê–†–ö–ê", "–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï", "–¢–ò–ü",
        "–®–ê–°–°–ò", "–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–†", "–ì–û–î –í–´–ü–£–°–ö–ê", "–ö–ê–¢–ï–ì–û–†–ò–Ø",
        "–≠–ö–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ö–õ–ê–°–°", "–ó–ê–Ø–í–ò–¢–ï–õ–¨","- —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å", "–ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–¨", "–°–ë–û–†–û–ß–ù–´–ô –ó–ê–í–û–î",
         "–ö–æ–ª–µ—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞/–≤–µ–¥—É—â–∏–µ –∫–æ–ª–µ—Å–∞",  # üëà —Å—é–¥–∞
        "–°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
        "–¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/ c–∑–∞–¥–∏ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)",
        "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)",
        "–ö–∞–±–∏–Ω–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)",
        "–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, –ú3)",
        "–û–±—â–∏–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú3 –∫–ª–∞—Å—Å–∞ III)",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, M3, L)",
        "–†–∞–º–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L)",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π/–∫–æ–ª–µ—Å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û)",
        "–ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–≥",
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–≥",
        "–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º",
        "–ë–∞–∑–∞, –º–º",
        "–ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º",
        "–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
        "–î–≤–∏–≥–∞—Ç–µ–ª—å",
        "–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–≥–æ—Ä–∞–Ω–∏—è (–º–∞—Ä–∫–∞, —Ç–∏–ø)",
        "- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤",
        "- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤",
        "- —Ä–∞–±–æ—á–∏–π –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–º3",
        "- —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è",
        "- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (–º–∏–Ω.-1)",
        "–¢–æ–ø–ª–∏–≤–æ",
        "–°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è (—Ç–∏–ø)",
        "–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è (—Ç–∏–ø)",
        "–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –≥–∞–∑–æ–≤",
        "–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è",
        "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í",
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç",
        "–í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã",
        "–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)",
        "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)",
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)",
        "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏",
        "–°—Ü–µ–ø–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)",
        "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è",
        "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–º–∞—Ä–∫–∞, —Ç–∏–ø)",
        "–†–µ–¥—É–∫—Ç–æ—Ä",
        "–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)",
        "–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)",
        "–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)",
        "-—Ä–∞–±–æ—á–∞—è", 
        "-–∑–∞–ø–∞—Å–Ω–∞—è", 
        "-—Å—Ç–æ—è–Ω–æ—á–Ω–∞—è",
        "–®–∏–Ω—ã",
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
        "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
        "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø"


        # –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
    ]
    line_clean = line.strip().lower()
    return any(line_clean.startswith(h.lower()) for h in headers)

def extract_value(line, field_name):
    """–ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–µ–≤–∞ –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞"""
    if line.strip().startswith(field_name):
        parts = line.split(field_name, 1)
        if len(parts) > 1:
            return clean_text(parts[1])
    return None

def parse_fields(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø, –ú–ê–†–ö–ê, –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –∏ –¢–ò–ü"""
    result = json.loads(json.dumps(FIELDS_TEMPLATE))
    lines = [line.strip() for line in text.split("\n") if line.strip()]
    total_lines = len(lines)

    i = 0
    while i < total_lines:
        line = lines[i]
        line = clean_text(line)

        # –ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø
        # –ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø ‚Äî –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Å–±–æ—Ä–∫–∞
        if line.startswith("–ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø"):
            collected_lines = []
            value = extract_value(line, "–ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø")
            if value:
                collected_lines.append(clean_text(value))

            j = i + 1
            while j < total_lines:
                next_line = lines[j].strip()
                if is_header(next_line):  # –ï—Å–ª–∏ –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    break
                if next_line:
                    collected_lines.append(clean_text(next_line))
                j += 1

            full_text = " ".join(collected_lines)
            result["–ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø"] = full_text if full_text else ""
            i = j - 1  # –°–¥–≤–∏–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å

        # –ú–ê–†–ö–ê
        elif line.startswith("–ú–ê–†–ö–ê"):
            value = extract_value(line, "–ú–ê–†–ö–ê")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–ú–ê–†–ö–ê"] = value

        # –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï
        elif line.startswith("–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï"):
            value = extract_value(line, "–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï"] = value

        # –¢–ò–ü
        elif line.strip() == "–¢–ò–ü":
            if i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    result["–¢–ò–ü"] = clean_text(next_line)
                    i += 1
        elif line.startswith("–¢–ò–ü"):
            value = extract_value(line, "–¢–ò–ü")
            if value:
                result["–¢–ò–ü"] = value

                # –®–ê–°–°–ò
        elif line.startswith("–®–ê–°–°–ò"):
            value = extract_value(line, "–®–ê–°–°–ò")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–®–ê–°–°–ò"] = value

        # –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–† (VIN)
        elif line.startswith("–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–† (VIN)"):
            value = extract_value(line, "–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–† (VIN)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–† (VIN)"] = value

        # –ì–û–î –í–´–ü–£–°–ö–ê
        elif line.startswith("–ì–û–î –í–´–ü–£–°–ö–ê"):
            value = extract_value(line, "–ì–û–î –í–´–ü–£–°–ö–ê")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–ì–û–î –í–´–ü–£–°–ö–ê"] = value

        # –ö–ê–¢–ï–ì–û–†–ò–Ø
        elif line.startswith("–ö–ê–¢–ï–ì–û–†–ò–Ø"):
            value = extract_value(line, "–ö–ê–¢–ï–ì–û–†–ò–Ø")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–ö–ê–¢–ï–ì–û–†–ò–Ø"] = value

        # –≠–ö–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ö–õ–ê–°–°
        elif line.startswith("–≠–ö–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ö–õ–ê–°–°"):
            value = extract_value(line, "–≠–ö–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ö–õ–ê–°–°")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–≠–ö–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ö–õ–ê–°–°"] = value

        # –ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°
        elif line.startswith("–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"):
            collected_lines = []

            value = extract_value(line, "–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°")
            if value:
                collected_lines.append(clean_text(value))

            j = i + 1
            lines_read = 0
            line_limit = 2

            while j < total_lines and lines_read < line_limit:
                next_line = lines[j].strip()
                if next_line and not is_header(next_line):
                    collected_lines.append(clean_text(next_line))
                    lines_read += 1
                    j += 1
                else:
                    break

            full_text = " ".join(collected_lines)
            result["–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"] = full_text if full_text else ""
            i = j - 1


        # –ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°
        elif line.startswith("–ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"):
            value = extract_value(line, "–ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"] = value

        # –°–ë–û–†–û–ß–ù–´–ô –ó–ê–í–û–î –ò –ï–ì–û –ê–î–†–ï–°
        elif line.startswith("–°–ë–û–†–û–ß–ù–´–ô –ó–ê–í–û–î –ò –ï–ì–û –ê–î–†–ï–°"):
            value = extract_value(line, "–°–ë–û–†–û–ß–ù–´–ô –ó–ê–í–û–î –ò –ï–ì–û –ê–î–†–ï–°")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–°–ë–û–†–û–ß–ù–´–ô –ó–ê–í–û–î –ò –ï–ì–û –ê–î–†–ï–°"] = value

        # –ö–æ–ª–µ—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞/–≤–µ–¥—É—â–∏–µ –∫–æ–ª–µ—Å–∞
        elif line.startswith("–ö–æ–ª–µ—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞/–≤–µ–¥—É—â–∏–µ –∫–æ–ª–µ—Å–∞"):
            value = extract_value(line, "–ö–æ–ª–µ—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞/–≤–µ–¥—É—â–∏–µ –∫–æ–ª–µ—Å–∞")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–ö–æ–ª–µ—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞/–≤–µ–¥—É—â–∏–µ –∫–æ–ª–µ—Å–∞"] = value

        # –°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        elif line.startswith("–°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"):
            value = extract_value(line, "–°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"] = value

        # –¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)
        elif line.startswith("–¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)"):
            value = extract_value(line, "–¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)"] = value

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/ c–∑–∞–¥–∏ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)
        elif line.startswith("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/ c–∑–∞–¥–∏ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)"):
            value = extract_value(line, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/ c–∑–∞–¥–∏ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1]
                if not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
            result["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/ c–∑–∞–¥–∏ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)"] = value

        elif line.startswith("–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)"):
            value = extract_value(line, "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""  # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ
            result["–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)"] = value

        # –ö–∞–±–∏–Ω–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)
        elif line.startswith("–ö–∞–±–∏–Ω–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)"):
            value = extract_value(line, "–ö–∞–±–∏–Ω–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ö–∞–±–∏–Ω–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)"] = value

        # –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, –ú3)
        elif line.startswith("–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, –ú3)"):
            value = extract_value(line, "–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, –ú3)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, –ú3)"] = value

        # –û–±—â–∏–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú3 –∫–ª–∞—Å—Å–∞ III)
        elif line.startswith("–û–±—â–∏–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú3 –∫–ª–∞—Å—Å–∞ III)"):
            value = extract_value(line, "–û–±—â–∏–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú3 –∫–ª–∞—Å—Å–∞ III)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–û–±—â–∏–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú3 –∫–ª–∞—Å—Å–∞ III)"] = value

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, M3, L)
        elif line.startswith("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, M3, L)"):
            value = extract_value(line, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, M3, L)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, M3, L)"] = value

        # –†–∞–º–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L)
        elif line.startswith("–†–∞–º–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L)"):
            value = extract_value(line, "–†–∞–º–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–†–∞–º–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L)"] = value

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π/–∫–æ–ª–µ—Å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û)
        elif line.startswith("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π/–∫–æ–ª–µ—Å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û)"):
            value = extract_value(line, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π/–∫–æ–ª–µ—Å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π/–∫–æ–ª–µ—Å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û)"] = value

        # –ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–≥
        elif line.startswith("–ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–≥"):
            value = extract_value(line, "–ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–≥")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–≥"] = value

        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–≥
        elif "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ" in line and i + 1 < total_lines:
            # –°–∫–ª–µ–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
            merged_line = line + " " + lines[i + 1].strip()

            # –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ"
            header_pos = merged_line.find("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ")
            
            if header_pos != -1:
                # –í—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ —ç—Ç–æ–π —Ñ—Ä–∞–∑—ã
                after_header = merged_line[header_pos + len("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ"):].strip()

                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
                match = re.search(r"\d+", after_header)
                if match:
                    value = match.group(0)
                else:
                    value = ""
                
                result["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–≥"] = value
                i += 1  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É (—Å–∫–ª–µ–∏–ª–∏!)

        # –ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º
        elif line.startswith("–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"):
            # –ü–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–±—ã—á–Ω–æ –∏–¥—É—Ç –¥–ª–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
            after_header = line[len("–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"):].strip()
            
            if not after_header and i + 1 < total_lines:
                i += 1
                after_header = lines[i].strip()

            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
            dims = re.findall(r"\d+", after_header)

            # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–∏—Å–µ–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
            next_i = i
            while len(dims) < 3 and next_i + 1 < total_lines:
                next_i += 1
                next_line = lines[next_i].strip()
                next_dims = re.findall(r"\d+", next_line)
                dims.extend(next_dims)
                i = next_i  # –¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å

            # –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if dims:
                if len(dims) >= 1:
                    result["–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"]["–¥–ª–∏–Ω–∞"] = dims[0]
                if len(dims) >= 2:
                    result["–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"]["—à–∏—Ä–∏–Ω–∞"] = dims[1]
                if len(dims) >= 3:
                    result["–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"]["–≤—ã—Å–æ—Ç–∞"] = dims[2]

        # –ë–∞–∑–∞, –º–º
        elif line.startswith("–ë–∞–∑–∞, –º–º"):
            value = extract_value(line, "–ë–∞–∑–∞, –º–º")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ë–∞–∑–∞, –º–º"] = value

                # –ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º
        elif line.startswith("–ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º"):
            value = extract_value(line, "–ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º"] = value

                    # –û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        elif line.startswith("–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"):
            collected_lines = []

            # –î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            first_value = extract_value(line, "–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞")
            if first_value:
                collected_lines.append(clean_text(first_value))

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            j = i + 1
            while j < total_lines:
                next_line = lines[j].strip()

                if is_header(next_line):  # –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –≤—ã—Ö–æ–¥–∏–º
                    break

                collected_lines.append(clean_text(next_line))
                j += 1

            result["–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"] = " ".join(collected_lines).strip()
            i = j - 1  # –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å


        elif line.lower().startswith("–¥–≤–∏–≥–∞—Ç–µ–ª—å"):
            # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ "–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≥–æ—Ä–∞–Ω–∏—è" ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å
            value = extract_value(line, "–î–≤–∏–≥–∞—Ç–µ–ª—å")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–≥–æ—Ä–∞–Ω–∏—è (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = value

                # - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤
        elif line.startswith("- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤"):
            value = extract_value(line, "- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤"] = value

        # - —Ä–∞–±–æ—á–∏–π –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–º3
        elif line.startswith("- —Ä–∞–±–æ—á–∏–π –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–º3"):
            value = extract_value(line, "- —Ä–∞–±–æ—á–∏–π –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–º3")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["- —Ä–∞–±–æ—á–∏–π –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–º3"] = value

        # - —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è
        elif line.startswith("- —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è"):
            value = extract_value(line, "- —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["- —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è"] = value

        # - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (–º–∏–Ω.-1)
        elif line.startswith("- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (–º–∏–Ω.-1)"):
            value = extract_value(line, "- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (–º–∏–Ω.-1)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (–º–∏–Ω.-1)"] = value

                # –¢–æ–ø–ª–∏–≤–æ
        elif line.startswith("–¢–æ–ø–ª–∏–≤–æ"):
            value = extract_value(line, "–¢–æ–ø–ª–∏–≤–æ")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–¢–æ–ø–ª–∏–≤–æ"] = value

        # –°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è (—Ç–∏–ø)
        elif line.startswith("–°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è (—Ç–∏–ø)"):
            value = extract_value(line, "–°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è (—Ç–∏–ø)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è (—Ç–∏–ø)"] = value

        # –°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è (—Ç–∏–ø)
        elif line.startswith("–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è (—Ç–∏–ø)"):
            value = extract_value(line, "–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è (—Ç–∏–ø)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è (—Ç–∏–ø)"] = value

        # –°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –≥–∞–∑–æ–≤
        elif line.startswith("–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –≥–∞–∑–æ–≤"):
            value = extract_value(line, "–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –≥–∞–∑–æ–≤")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –≥–∞–∑–æ–≤"] = value


        # –≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è
        elif line.startswith("–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è"):
            value = extract_value(line, "–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è"] = value

        # –†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í
        elif line.startswith("–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í"):
            value = extract_value(line, "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í"] = value

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç
        elif line.startswith("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç"):
            value = extract_value(line, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç"] = value

        # –í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã
        elif line.startswith("–í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã"):
            value = extract_value(line, "–í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã"] = value

        # –≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)
        elif line.startswith("–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"):
            value = extract_value(line, "–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = value

        # –†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)
        elif line.startswith("–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"):
            value = extract_value(line, "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"] = value

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)
        elif line.startswith("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"):
            value = extract_value(line, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"] = value

        # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
        elif line.startswith("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏"):
            value = extract_value(line, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏"] = value

        # –°—Ü–µ–ø–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)
        elif line.startswith("–°—Ü–µ–ø–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"):
            value = extract_value(line, "–°—Ü–µ–ø–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–°—Ü–µ–ø–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = value

                # –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è
        elif line.startswith("–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"):
            value = extract_value(line, "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"] = value

        # –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–º–∞—Ä–∫–∞, —Ç–∏–ø)
        elif line.startswith("–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–º–∞—Ä–∫–∞, —Ç–∏–ø)"):
            value = extract_value(line, "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–º–∞—Ä–∫–∞, —Ç–∏–ø)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = value

        # –†–µ–¥—É–∫—Ç–æ—Ä
        elif line.startswith("–†–µ–¥—É–∫—Ç–æ—Ä"):
            value = extract_value(line, "–†–µ–¥—É–∫—Ç–æ—Ä")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–†–µ–¥—É–∫—Ç–æ—Ä"] = value

        # –ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø) ‚Äî –ø–µ—Ä–µ–¥–Ω—è—è –∏ –∑–∞–¥–Ω—è—è
        elif line.startswith("–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"):
            value_front = ""
            value_rear = ""
            collecting_front = False
            collecting_rear = False

            # –ò–¥—ë–º –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Å—Ç—Ä–æ–∫–∞–º –ø–æ—Å–ª–µ "–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"
            j = i + 1
            while j < total_lines:
                current_line = lines[j].strip()

                if is_header(current_line):  # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –≤—ã—Ö–æ–¥–∏–º
                    break

                lower_line = current_line.lower()

                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ "–ø–µ—Ä–µ–¥–Ω—è—è", –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –ø–µ—Ä–µ–¥–Ω—é—é –ø–æ–¥–≤–µ—Å–∫—É
                if "–ø–µ—Ä–µ–¥–Ω—è—è" in lower_line:
                    collecting_front = True
                    collecting_rear = False
                    after_keyword = current_line.split("–ø–µ—Ä–µ–¥–Ω—è—è", 1)[-1].strip(":- ")
                    if after_keyword:
                        value_front += " " + after_keyword

                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ "–∑–∞–¥–Ω—è—è", –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∑–∞–¥–Ω—é—é –ø–æ–¥–≤–µ—Å–∫—É
                elif "–∑–∞–¥–Ω—è—è" in lower_line:
                    collecting_front = False
                    collecting_rear = True
                    after_keyword = current_line.split("–∑–∞–¥–Ω—è—è", 1)[-1].strip(":- ")
                    if after_keyword:
                        value_rear += " " + after_keyword

                # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å —Ç—É –ø–æ–¥–≤–µ—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞—á–∞–ª–∏
                else:
                    if collecting_front:
                        value_front += " " + current_line
                    elif collecting_rear:
                        value_rear += " " + current_line

                j += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result["–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"]["–ø–µ—Ä–µ–¥–Ω—è—è"] = clean_text(value_front) if value_front else ""
            result["–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"]["–∑–∞–¥–Ω—è—è"] = clean_text(value_rear) if value_rear else ""

            i = j - 1  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞


                # –†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)
        elif line.startswith("–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"):
            value = extract_value(line, "–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = value

        # –¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)
        elif line.startswith("–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)"):
            value_work = ""
            value_spare = ""
            value_parking = ""

            current_field = None  # –∫–∞–∫–∞—è —Å–µ–π—á–∞—Å —Å–∏—Å—Ç–µ–º–∞: —Ä–∞–±–æ—á–∞—è / –∑–∞–ø–∞—Å–Ω–∞—è / —Å—Ç–æ—è–Ω–æ—á–Ω–∞—è

            j = i + 1
            while j < total_lines:
                current_line = lines[j].strip()

                if is_header(current_line):
                    break  # –Ω–∞—à–ª–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–±–æ—Ä

                lower_line = current_line.lower()

                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π –ø–æ–¥—Å–µ–∫—Ü–∏–∏
                if lower_line.startswith("- —Ä–∞–±–æ—á–∞—è"):
                    current_field = "—Ä–∞–±–æ—á–∞—è"
                    after_keyword = current_line.split("—Ä–∞–±–æ—á–∞—è", 1)[-1].strip(":- ")
                    if after_keyword:
                        value_work += " " + after_keyword

                elif lower_line.startswith("- –∑–∞–ø–∞—Å–Ω–∞—è"):
                    current_field = "–∑–∞–ø–∞—Å–Ω–∞—è"
                    after_keyword = current_line.split("–∑–∞–ø–∞—Å–Ω–∞—è", 1)[-1].strip(":- ")
                    if after_keyword:
                        value_spare += " " + after_keyword

                elif lower_line.startswith("- —Å—Ç–æ—è–Ω–æ—á–Ω–∞—è"):
                    current_field = "—Å—Ç–æ—è–Ω–æ—á–Ω–∞—è"
                    after_keyword = current_line.split("—Å—Ç–æ—è–Ω–æ—á–Ω–∞—è", 1)[-1].strip(":- ")
                    if after_keyword:
                        value_parking += " " + after_keyword

                else:
                    # –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞
                    if current_field == "—Ä–∞–±–æ—á–∞—è":
                        value_work += " " + current_line
                    elif current_field == "–∑–∞–ø–∞—Å–Ω–∞—è":
                        value_spare += " " + current_line
                    elif current_field == "—Å—Ç–æ—è–Ω–æ—á–Ω–∞—è":
                        value_parking += " " + current_line

                j += 1

            # –ß–∏—Å—Ç–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result["–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)"]["—Ä–∞–±–æ—á–∞—è"] = clean_text(value_work) if value_work else ""
            result["–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)"]["–∑–∞–ø–∞—Å–Ω–∞—è"] = clean_text(value_spare) if value_spare else ""
            result["–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)"]["—Å—Ç–æ—è–Ω–æ—á–Ω–∞—è"] = clean_text(value_parking) if value_parking else ""

            i = j - 1  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å

                # –®–∏–Ω—ã
        elif line.startswith("–®–∏–Ω—ã"):
            value = extract_value(line, "–®–∏–Ω—ã")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–®–∏–Ω—ã"] = value

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        elif line.startswith("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"):
            collected_lines = []

            value = extract_value(line, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞")
            if value:
                collected_lines.append(clean_text(value))

            j = i + 1
            line_limit = 2  # —á–∏—Ç–∞–µ–º –º–∞–∫—Å–∏–º—É–º 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            lines_read = 0

            while j < total_lines and lines_read < line_limit:
                next_line = lines[j].strip()
                if next_line and not is_header(next_line):
                    collected_lines.append(clean_text(next_line))
                    lines_read += 1
                j += 1

            full_text = " ".join(collected_lines)
            result["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"] = full_text if full_text else ""
            i = j - 1


        # –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        elif line.startswith("–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"):
            value = extract_value(line, "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è")
            if not value and i + 1 < total_lines:
                next_line = lines[i + 1].strip()
                if next_line and not is_header(next_line):
                    value = clean_text(next_line)
                    i += 1
                else:
                    value = ""
            result["–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"] = value

                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
        elif "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø" in line.upper():
            value = extract_value(line, "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
            j = i + 1

            # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –ø–æ–∫–∞ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            collected_lines = []
            if value:
                collected_lines.append(clean_text(value))

            while j < total_lines:
                next_line = lines[j].strip()
                if is_header(next_line):  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                    break
                if next_line:  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º
                    collected_lines.append(clean_text(next_line))
                j += 1

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            full_text = " ".join(collected_lines)
            result["–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø"] = full_text if full_text else ""

            i = j - 1  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å


        i += 1
        
    return result

def save_json(data, path):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


if __name__ == "__main__":
    test_folder = os.path.join(os.getcwd(), "test")
    pdf_files = [f for f in os.listdir(test_folder) if f.lower().endswith(".pdf")]
    if not pdf_files:
        print("‚ùå –ù–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ test")
        exit(1)

    pdf_path = os.path.join(test_folder, pdf_files[0])
    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª: {pdf_files[0]}")

    txt = extract_text_pdfplumber(pdf_path)
    if not txt or len(txt) < 100:
        print("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º OCR...")
        txt = extract_text_ocr(pdf_path)

    # –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥
    parsed = parse_fields(txt)
    
    # --- 1. –ü–û–°–¢–û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –û–î–ù–û–ì–û –î–í–ò–ì–ê–¢–ï–õ–Ø (–ë–ï–í/–æ–±—ã—á–Ω—ã–π) ---
    m_block = re.search(
        r"–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è\s*(.*?)\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏",
        txt, re.S
    )
    if m_block:
        block = m_block.group(1).strip()
        parsed["–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è"] = [
            s.strip() for s in block.split(";") if s.strip()
        ]

    m1 = re.search(r"–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í\s*([\d\.]+)", txt)
    if m1:
        parsed["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í"] = m1.group(1)

    m2 = re.search(r"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç\s*([\d\.]+)", txt)
    if m2:
        parsed["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç"] = m2.group(1)

    # --- 2. –§–ò–ö–° –î–õ–Ø –î–í–£–• –î–í–ò–ì–ê–¢–ï–õ–ï–ô (–ì–ò–ë–†–ò–î) ---
    def split_list_from_string(val):
        """–†–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π, —É–±–∏—Ä–∞–µ—Ç –ø—É—Å—Ç—ã–µ"""
        if not val:
            return []
        if isinstance(val, list):  # —É–∂–µ —Å–ø–∏—Å–æ–∫
            return val
        return [x.strip() for x in re.split(r"[;,]", val) if x.strip()]

    def is_hybrid_motor_case(parsed):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥ –Ω–∞–º–∏ –≥–∏–±—Ä–∏–¥ —Å –¥–≤—É–º—è —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏:
        - –í –ø–æ–ª–µ –≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø) ‚Äî –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        - –í –ø–æ–ª—è—Ö "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í" –∏ "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç" ‚Äî –ø–æ 2 –∑–Ω–∞—á–µ–Ω–∏—è
        """
        brands = split_list_from_string(parsed.get("–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"))
        voltages = split_list_from_string(parsed.get("–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í"))
        powers = split_list_from_string(parsed.get("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç"))
        return len(brands) == 2 and len(voltages) == 2 and len(powers) == 2

    if is_hybrid_motor_case(parsed):
        brands = split_list_from_string(parsed["–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"])
        voltages = split_list_from_string(parsed["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í"])
        powers = split_list_from_string(parsed["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç"])
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è BEV –ø—É—Å—Ç—ã–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        parsed["–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è"] = ""
        parsed["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í"] = voltages[0]
        parsed["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç"] = powers[0]
        parsed["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"] = voltages[1]
        parsed["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"] = powers[1]
        parsed["–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = ", ".join(brands)

    out_path = os.path.splitext(pdf_path)[0] + "_parsed.json"
    save_json(parsed, out_path)

    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {os.path.basename(out_path)}")
    for key, val in parsed.items():
        print(f"{key}: {val}")

def extract_text_from_pdf(file_path):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: —Å–Ω–∞—á–∞–ª–∞ pdfplumber, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç ‚Äî OCR"""
    text = extract_text_pdfplumber(file_path)
    if not text or len(text.strip()) < 100:
        print("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ pdfplumber, –ø—Ä–æ–±—É–µ–º OCR...")
        text = extract_text_ocr(file_path)
    return text
