from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import json
import os
import time

AUTH_CACHE_PATH = "auth_cache.json"

def save_auth_to_cache(token, cookies_dict):
    with open(AUTH_CACHE_PATH, "w", encoding="utf-8") as f:
        json.dump({"token": token, "cookies": cookies_dict}, f, ensure_ascii=False)

def load_auth_from_cache():
    if os.path.exists(AUTH_CACHE_PATH):
        with open(AUTH_CACHE_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data.get("token"), data.get("cookies")
    return None, None

def get_token_and_cookies_via_selenium():
    options = Options()
    options.add_experimental_option("detach", True)  # –ß—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è
    driver = webdriver.Chrome(options=options)

    driver.get("https://pts.gov.kz/login")
    print("üåê –û—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –Ω–∞–∂–º–∏ '–í–æ–π—Ç–∏'.")

    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ localStorage (–º–∞–∫—Å–∏–º—É–º 120 —Å–µ–∫—É–Ω–¥)
    token = None
    max_wait_time = 120  # —Å–µ–∫—É–Ω–¥
    start_time = time.time()

    while time.time() - start_time < max_wait_time:
        try:
            token = driver.execute_script("return JSON.parse(localStorage.getItem('user'))?.token")
            if token:
                break
        except Exception:
            pass
        time.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

    if not token:
        driver.quit()
        raise Exception("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

    print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")

    cookies = driver.get_cookies()
    cookies_dict = {cookie['name']: cookie['value'] for cookie in cookies}

    driver.quit()

    save_auth_to_cache(token, cookies_dict)
    return token, cookies_dict
