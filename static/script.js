let siteData = null;
let pdfData = null;

function fetchFromSite() {
  const url = document.getElementById("siteUrl").value.trim();
  if (!url) return;

  document.getElementById("status").innerText = "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞...";

  fetch("/parse_site", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ url })
  })
    .then(res => res.json())
    .then(data => {
      siteData = data;
      document.getElementById("status").innerText = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.";
      compareData();
    })
    .catch(err => {
      document.getElementById("status").innerText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞.";
    });
}

function fetchFromPDF() {
  const url = document.getElementById("pdfUrl").value.trim();
  if (!url) return;

  document.getElementById("status").innerText = "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º PDF –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...";

  fetch("/parse_pdf", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ url })
  })
    .then(res => res.json())
    .then(data => {
      pdfData = data;
      document.getElementById("status").innerText = "‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ PDF –∑–∞–≥—Ä—É–∂–µ–Ω—ã.";
      compareData();
    })
    .catch(err => {
      document.getElementById("status").innerText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF.";
    });
}

function uploadPDF() {
    const fileInput = document.getElementById("pdfFile");
    const file = fileInput.files[0];
    if (!file) return;
  
    const formData = new FormData();
    formData.append("file", file);
  
    document.getElementById("status").innerText = "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF...";
  
    fetch("/parse_pdf_file", {
      method: "POST",
      body: formData
    })
      .then(res => res.json())
      .then(data => {
        pdfData = data;
        document.getElementById("status").innerText = "‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.";
        compareData();
      })
      .catch(err => {
        document.getElementById("status").innerText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF-—Ñ–∞–π–ª–∞.";
      });
  }
  
function compareData() {
  if (!siteData || !pdfData) return;

  const tbody = document.getElementById("comparisonBody");
  tbody.innerHTML = "";

  const priorityFields = [
    "–ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø", "–ú–ê–†–ö–ê", "–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï", "–¢–ò–ü", "–®–ê–°–°–ò",
    "–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–† (VIN)", "–ì–û–î –í–´–ü–£–°–ö–ê", "–ö–ê–¢–ï–ì–û–†–ò–Ø", "–≠–ö–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ö–õ–ê–°–°",
    "–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°", "–ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°", "–°–ë–û–†–û–ß–ù–´–ô –ó–ê–í–û–î –ò –ï–ì–û –ê–î–†–ï–°",
    "–ö–æ–ª–µ—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞/–≤–µ–¥—É—â–∏–µ –∫–æ–ª–µ—Å–∞", "–°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
    "–¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/ c–∑–∞–¥–∏ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)",
    "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)", "–ö–∞–±–∏–Ω–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)",
    "–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, –ú3)", "–û–±—â–∏–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú3 –∫–ª–∞—Å—Å–∞ III)",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, M3, L)", "–†–∞–º–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L)",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π/–∫–æ–ª–µ—Å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û)", "–ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–≥",
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–≥",
    "–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º", "- –¥–ª–∏–Ω–∞", "- —à–∏—Ä–∏–Ω–∞", "- –≤—ã—Å–æ—Ç–∞",
    "–ë–∞–∑–∞, –º–º", "–ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º",
    "–î–≤–∏–≥–∞—Ç–µ–ª—å",
    "–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≥–æ—Ä–∞–Ω–∏—è (–º–∞—Ä–∫–∞, —Ç–∏–ø)",
    "–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞", 
    "- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤",
    "- —Ä–∞–±–æ—á–∏–π –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–º3", "- —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è", "- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (–º–∏–Ω.-1)",
    "–¢–æ–ø–ª–∏–≤–æ", "–°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è (—Ç–∏–ø)", "–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è (—Ç–∏–ø)", "–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –≥–∞–∑–æ–≤",
    "–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è", "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç",
    "–í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã", "–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)", "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)",
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)",
    "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏", "–°—Ü–µ–ø–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)", "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è", "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–º–∞—Ä–∫–∞, —Ç–∏–ø)",
    "–†–µ–¥—É–∫—Ç–æ—Ä", "–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)", "- –ø–µ—Ä–µ–¥–Ω—è—è", "- –∑–∞–¥–Ω—è—è",
    "–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)", "–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)", "- —Ä–∞–±–æ—á–∞—è", "- –∑–∞–ø–∞—Å–Ω–∞—è", "- —Å—Ç–æ—è–Ω–æ—á–Ω–∞—è",
    "–®–∏–Ω—ã", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞", "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"
  ];

  let mismatchCount = 0;

  for (const key of priorityFields) {
    let siteVal = siteData[key];
    let pdfVal = pdfData[key];

    // –ï—Å–ª–∏ –ø–æ–ª–µ –æ–±—ä–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –ü–æ–¥–≤–µ—Å–∫–∞, –¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã)
    if (key === "–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º" && typeof siteVal === "object") {
      // –í –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ, –∏–ª–∏ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å "—Å–º. –Ω–∏–∂–µ"
      const row = document.createElement("tr");
      row.innerHTML = `<td>${key}</td><td colspan="3" style="font-style:italic;">—Å–º. –Ω–∏–∂–µ</td>`;
      tbody.appendChild(row);
      continue;
    }
    if (key === "–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)" && typeof siteVal === "object") {
      const row = document.createElement("tr");
      row.innerHTML = `<td>${key}</td><td colspan="3" style="font-style:italic;">—Å–º. –Ω–∏–∂–µ</td>`;
      tbody.appendChild(row);
      continue;
    }
    if (key === "–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)" && typeof siteVal === "object") {
      const row = document.createElement("tr");
      row.innerHTML = `<td>${key}</td><td colspan="3" style="font-style:italic;">—Å–º. –Ω–∏–∂–µ</td>`;
      tbody.appendChild(row);
      continue;
    }
    // –ü–æ–¥–ø–æ–ª—è –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö
    if (key === "- –¥–ª–∏–Ω–∞" || key === "- —à–∏—Ä–∏–Ω–∞" || key === "- –≤—ã—Å–æ—Ç–∞") {
      siteVal = siteData["–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"]?.[key.replace('- ', '')] ?? "";
      pdfVal = pdfData["–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"]?.[key.replace('- ', '')] ?? "";
    }
    if (key === "- –ø–µ—Ä–µ–¥–Ω—è—è" || key === "- –∑–∞–¥–Ω—è—è") {
      siteVal = siteData["–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"]?.[key.replace('- ', '')] ?? "";
      pdfVal = pdfData["–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"]?.[key.replace('- ', '')] ?? "";
    }
    if (key === "- —Ä–∞–±–æ—á–∞—è" || key === "- –∑–∞–ø–∞—Å–Ω–∞—è" || key === "- —Å—Ç–æ—è–Ω–æ—á–Ω–∞—è") {
      siteVal = siteData["–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)"]?.[key.replace('- ', '')] ?? "";
      pdfVal = pdfData["–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)"]?.[key.replace('- ', '')] ?? "";
    }

    const isEmptyBoth = !siteVal && !pdfVal;
    const isMatch = isEmptyBoth || fuzzyMatch(siteVal, pdfVal);

    const row = document.createElement("tr");
    row.className = isMatch ? "match" : "mismatch";
    row.innerHTML = `
      <td>${key}</td>
      <td>${formatValue(siteVal)}</td>
      <td>${formatValue(pdfVal)}</td>
      <td>${isMatch ? "‚úî" : "‚ùå"}</td>
    `;
    if (!isMatch) mismatchCount++;
    tbody.appendChild(row);
  }

  const result = document.getElementById("finalResult");
  result.innerText = mismatchCount === 0
    ? "‚úî –í—Å–µ –ø–æ–ª—è —Å–æ–≤–ø–∞–¥–∞—é—Ç!"
    : `‚ùå –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ ${mismatchCount} –ø–æ–ª—è–º.`;
}

  
  
  
function formatValue(val) {
  if (Array.isArray(val)) {
    // –ö—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return val.join("<br>");
  }
  if (typeof val === "object" && val !== null) {
    return JSON.stringify(val);
  }
  return val ?? "";
}



function clearComparison() {
  siteData = null;
  pdfData = null;

  document.getElementById("comparisonBody").innerHTML = "";
  document.getElementById("finalResult").innerText = "";
  document.getElementById("status").innerText = "üßπ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.";
  document.getElementById("siteUrl").value = "";
}

function normalizeDate(dateStr) {
  dateStr = (dateStr ?? "").trim();

  if (!dateStr) return "";

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
  dateStr = dateStr.replace(/[^0-9.\-\/]/g, '');

  if (dateStr.includes('-')) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD ‚Üí 20250407
    const parts = dateStr.split('-');
    if (parts.length === 3) {
      return parts[0] + parts[1].padStart(2, '0') + parts[2].padStart(2, '0');
    }
  } else if (dateStr.includes('.')) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DD.MM.YYYY ‚Üí 20250407
    const parts = dateStr.split('.');
    if (parts.length === 3) {
      return parts[2] + parts[1].padStart(2, '0') + parts[0].padStart(2, '0');
    }
  } else if (dateStr.includes('/')) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DD/MM/YYYY ‚Üí 20250407
    const parts = dateStr.split('/');
    if (parts.length === 3) {
      return parts[2] + parts[1].padStart(2, '0') + parts[0].padStart(2, '0');
    }
  }

  return ""; // –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
}

function fuzzyMatch(a, b) {
  a = (a ?? "").toString().trim();
  b = (b ?? "").toString().trim();

  if (!a && !b) return true; // ‚úÖ –û–±–∞ –ø—É—Å—Ç—ã–µ ‚Äî —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (!a || !b) return false; // ‚ùå –û–¥–∏–Ω –ø—É—Å—Ç–æ–π, –¥—Ä—É–≥–æ–π –Ω–µ—Ç

  // ‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∞—Ç—ã
  const normalizedA = normalizeDate(a);
  const normalizedB = normalizeDate(b);
  if (normalizedA && normalizedB && normalizedA.length === 8 && normalizedB.length === 8) {
    return normalizedA === normalizedB;
  }

  // ‚ú® –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–∏—Å–µ–ª
  const numA = parseFloat(a.replace(/[^\d.,]/g, '').replace(',', '.'));
  const numB = parseFloat(b.replace(/[^\d.,]/g, '').replace(',', '.'));
  if (!isNaN(numA) && !isNaN(numB)) {
    return Math.abs(numA - numB) < 1e-2;
  }

  // ‚ú® –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
  const cleanA = a.toLowerCase().replace(/[^–∞-—èa-z0-9]/gi, '').trim();
  const cleanB = b.toLowerCase().replace(/[^–∞-—èa-z0-9]/gi, '').trim();
  if (cleanA.startsWith(cleanB) || cleanB.startsWith(cleanA)) return true;

  try {
    const objA = JSON.parse(a);
    const objB = JSON.parse(b);
    if (typeof objA === 'object' && typeof objB === 'object') {
      return JSON.stringify(objA) === JSON.stringify(objB);
    }
  } catch {}

  return cleanA === cleanB;
}

function checkTokenStatus() {
  fetch("/check_token_status")
    .then(res => res.json())
    .then(data => {
      const statusEl = document.getElementById("tokenStatus");
      const refreshBtn = document.getElementById("refreshBtn");

      if (data.status === "valid") {
    statusEl.textContent = "‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω";
    statusEl.style.color = "green";
    // refreshBtn –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞!
    } else if (data.status === "expired") {
        statusEl.textContent = "‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.";
        statusEl.style.color = "red";
    } else {
        statusEl.textContent = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: ${data.message || data.code}`;
        statusEl.style.color = "darkred";
    }
    // –ö–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
    refreshBtn.style.display = "inline-block";

    })
    .catch(err => {
      const statusEl = document.getElementById("tokenStatus");
      statusEl.textContent = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞";
      statusEl.style.color = "darkred";
      document.getElementById("refreshBtn").style.display = "inline-block";
    });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
setInterval(checkTokenStatus, 60000);
window.onload = checkTokenStatus;

function refreshToken() {
  if (!confirm("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ pts.gov.kz?")) return;

  fetch("/relogin", { method: "POST" })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        alert("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.");
        window.location.reload();
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + data.error);
      }
    })
    .catch(() => {
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.");
    });
}

