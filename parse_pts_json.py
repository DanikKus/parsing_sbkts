import requests
import re
from datetime import datetime
import urllib3
import os
from auth_token_selenium import get_token_and_cookies_via_selenium, load_auth_from_cache, save_auth_to_cache
import copy

def validate_token(token, cookies):
    url = "https://pts.gov.kz/api/compliencedocument/get?id=00000000-0000-0000-0000-000000000000"  # –∑–∞–≤–µ–¥–æ–º–æ –ø—É—Å—Ç–æ–π doc_id
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json",
        "User-Agent": "Mozilla/5.0",
        "Referer": "https://pts.gov.kz/",
        "X-Requested-With": "XMLHttpRequest"
    }
    try:
        response = requests.get(url, headers=headers, cookies=cookies, verify=False, timeout=10)
        return response.status_code != 401
    except:
        return False

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def get_json(endpoint: str, doc_id: str, label: str = ""):
    # <-- –ù–æ–≤–æ–µ: –í–°–ï–ì–î–ê –ß–ò–¢–ê–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ï token –∏ cookies –∏–∑ –∫—ç—à–∞
    token, cookies = load_auth_from_cache()
    if not token:
        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
        return None

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json",
        "User-Agent": "Mozilla/5.0",
        "Referer": "https://pts.gov.kz/",
        "X-Requested-With": "XMLHttpRequest"
    }
    url = f"https://pts.gov.kz/api/compliencedocument/{endpoint}?id={doc_id}"

    try:
        print(f"‚û°Ô∏è GET {url} —Å —Ç–æ–∫–µ–Ω–æ–º: Bearer {token[:20]}...")
        response = requests.get(url, headers=headers, cookies=cookies, verify=False)
        response.raise_for_status()
        data = response.json().get("data", None)

        if data in [None, [], {}]:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ '{endpoint}' ‚Üí –ø–æ–ª–µ '{label}' –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º.")
        else:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ '{endpoint}' –¥–ª—è –ø–æ–ª—è '{label}'")

        return data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")
        return None


# –®–∞–±–ª–æ–Ω –ø–æ–ª–µ–π
FIELDS_TEMPLATE = {
    "–ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø": None,
    "–ú–ê–†–ö–ê": None,
    "–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï": None,
    "–¢–ò–ü": None,
    "–®–ê–°–°–ò": None,
    "–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–† (VIN)": None,
    "–ì–û–î –í–´–ü–£–°–ö–ê": None,
    "–ö–ê–¢–ï–ì–û–†–ò–Ø": None,
    "–≠–ö–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ö–õ–ê–°–°": None,
    "–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°": None,
    "–ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°": None,
    "–°–ë–û–†–û–ß–ù–´–ô –ó–ê–í–û–î –ò –ï–ì–û –ê–î–†–ï–°": None,
    "–ö–æ–ª–µ—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞/–≤–µ–¥—É—â–∏–µ –∫–æ–ª–µ—Å–∞": None,
    "–°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞": None,
    "–¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)": None,
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/ c–∑–∞–¥–∏ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)": None,
    "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)": None,
    "–ö–∞–±–∏–Ω–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)": None,
    "–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, –ú3)": None,
    "–û–±—â–∏–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú3 –∫–ª–∞—Å—Å–∞ III)": None,
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, M3, L)": None,
    "–†–∞–º–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L)": None,
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π/–∫–æ–ª–µ—Å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û)": None,
    "–ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–≥": None,
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–≥": None,
    "–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º": {"–¥–ª–∏–Ω–∞": None, "—à–∏—Ä–∏–Ω–∞": None, "–≤—ã—Å–æ—Ç–∞": None},
    "–ë–∞–∑–∞, –º–º": None,
    "–ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º": None,
    "–î–≤–∏–≥–∞—Ç–µ–ª—å": None,
    "–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–∏–≤–æ–¥–∞": None,  # üÜï –í–°–¢–ê–í–ò–¢–¨ —Å—é–¥–∞
    "–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≥–æ—Ä–∞–Ω–∏—è (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤": None,
    "- —Ä–∞–±–æ—á–∏–π –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–º3": None,
    "- —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è": None,
    "- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (–º–∏–Ω.-1)": None,
    "–¢–æ–ø–ª–∏–≤–æ": None,
    "–°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è (—Ç–∏–ø)": None,
    "–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è (—Ç–∏–ø)": None,
    "–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –≥–∞–∑–æ–≤": None,
    "–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è": None,
    "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í": None,
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç": None,
    "–í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã": None,
    "–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)": None,
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)": None,
    "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏": None,
    "–°—Ü–µ–ø–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è": None,
    "–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "–†–µ–¥—É–∫—Ç–æ—Ä": None,
    "–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)": {"–ø–µ—Ä–µ–¥–Ω—è—è": None, "–∑–∞–¥–Ω—è—è": None},
    "–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)": None,
    "–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)": {"—Ä–∞–±–æ—á–∞—è": None, "–∑–∞–ø–∞—Å–Ω–∞—è": None, "—Å—Ç–æ—è–Ω–æ—á–Ω–∞—è": None},
    "–®–∏–Ω—ã": None,
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞": None,
    "–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è": None
}

def extract_doc_id(url: str) -> str:
    match = re.search(r'/([a-f0-9\-]{36})', url)
    return match.group(1) if match else None

def parse_vehicle_data_from_url(url: str):
    doc_id = extract_doc_id(url)
    if not doc_id:
        return {"error": "Invalid URL or missing doc_id."}

    data = copy.deepcopy(FIELDS_TEMPLATE)
    # –û–±–Ω—É–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è (–∏–Ω–∞—á–µ copy() –¥–µ–ª–∞–µ—Ç –Ω–µ–≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é)
    data["–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"] = {"–¥–ª–∏–Ω–∞": None, "—à–∏—Ä–∏–Ω–∞": None, "–≤—ã—Å–æ—Ç–∞": None}
    data["–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"] = {"–ø–µ—Ä–µ–¥–Ω—è—è": None, "–∑–∞–¥–Ω—è—è": None}
    data["–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)"] = {"—Ä–∞–±–æ—á–∞—è": None, "–∑–∞–ø–∞—Å–Ω–∞—è": None, "—Å—Ç–æ—è–Ω–æ—á–Ω–∞—è": None}

    base = get_json("get", doc_id)
    if not base:
        print("‚ùå –û—à–∏–±–∫–∞: –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω, —Å—Å—ã–ª–∫—É –∏–ª–∏ ID.")
        return {"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞."}

    data["–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"] = base.get("applicantName")
        # –ó–∞—è–≤–∏—Ç–µ–ª—å –∏ –µ–≥–æ –∞–¥—Ä–µ—Å
    if base.get("applicantName"):
        data["–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"] = base["applicantName"]
    elif base.get("organizationName"):
        data["–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"] = base["organizationName"]
    else:
        data["–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"] = None

    vtype = base.get("vehicleTypeDetail", {})
    chars = vtype.get("characteristicsDetail", {})

    # === –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è ===
    # === –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è –ø–æ engineTypeId ===
    # === –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è –ø–æ engineTypeId ===
    engine_type_map = {
        5767: "–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≥–æ—Ä–∞–Ω–∏—è",
        5768: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –¥–≤–∏–≥–∞—Ç–µ–ª—å",
        5897: "–ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ"
    }

    engine_type_id = chars.get("engineTypeId")  # <-- –í–û–¢ –¢–£–¢ –ó–ê–ú–ï–ù–ò–¢–¨
    data["–î–≤–∏–≥–∞—Ç–µ–ª—å"] = engine_type_map.get(engine_type_id)
        # üÜï –ì–∏–±—Ä–∏–¥–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    hybrid_info = chars.get("vehicleHybridDesigns")
    if hybrid_info and isinstance(hybrid_info, list) and hybrid_info[0].get("vehicleHybridDesignText"):
        data["–û–ø–∏—Å–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–∏–≤–æ–¥–∞"] = hybrid_info[0]["vehicleHybridDesignText"]



    data["–ú–ê–†–ö–ê"] = (vtype.get("makes") or [{}])[0].get("dicName")
    data["–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï"] = (vtype.get("commercialNames") or [{}])[0].get("commercialName")
    data["–¢–ò–ü"] = (vtype.get("types") or [{}])[0].get("typeValue")
    data["–ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–† (VIN)"] = (base.get("vinNumbers") or [{}])[0].get("number")
    data["–ì–û–î –í–´–ü–£–°–ö–ê"] = vtype.get("yearIssue")
    data["–ö–ê–¢–ï–ì–û–†–ò–Ø"] = (vtype.get("techCategories") or [{}])[0].get("dicName")
    data["–≠–ö–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ö–õ–ê–°–°"] = (vtype.get("ecoClasses") or [{}])[0].get("dicName")
    data["–ò–°–ü–´–¢–ê–¢–ï–õ–¨–ù–ê–Ø –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø"] = base.get("authorityName")
    data["–ó–ê–Ø–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"] = None  # –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–Ø –ø–æ fallback
    manufacturer = base.get("manufacturerName")
    if not manufacturer:
        plants = base.get("assemblyPlants") or []
        if plants:
            manufacturer = plants[0].get("organization")

    data["–ò–ó–ì–û–¢–û–í–ò–¢–ï–õ–¨ –ò –ï–ì–û –ê–î–†–ï–°"] = manufacturer
    data["–°–ë–û–†–û–ß–ù–´–ô –ó–ê–í–û–î –ò –ï–ì–û –ê–î–†–ï–°"] = (base.get("assemblyPlants") or [{}])[0].get("organization")
    if base.get("docDate"):
        data["–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"] = base["docDate"].split("T")[0]

    char_id = chars.get("id")
    if char_id:

        # === –≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã ===
        machines = get_json("GetElectricalMachineDetailsByDocId", doc_id)
        em_list = machines.get("electricalMachineDetails", []) if machines else []

        if em_list:
            if len(em_list) == 1:
                # üëâ –û–¥–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å
                m = em_list[0]
                mark = m.get("vehicleComponentMakeName", "")
                desc = m.get("vehicleComponentText", "")
                full_name = f"{mark},{desc}".strip(", ")

                data["–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è"] = full_name
                data["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í"] = str(m.get("electricalMachineVoltageMeasure", ""))
                data["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç"] = str(m.get("electricMotorPowerMeasure", ""))

                # üëâ –ê —ç—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏
                data["–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = None
                data["–í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã"] = None
                data["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"] = None
                data["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"] = None

            else:
                # üëâ –î–≤–∞ –∏ –±–æ–ª–µ–µ —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª–µ–π (–∫–∞–∫ —Å–µ–π—á–∞—Å)
                marks_types = []
                kinds = []
                voltages = []
                powers = []

                for m in em_list:
                    mark = m.get("vehicleComponentMakeName", "")
                    desc = m.get("vehicleComponentText", "")
                    full_name = f"{mark},{desc}".strip(", ")
                    marks_types.append(full_name)
                    kinds.append(m.get("electricalMachineKindName", ""))
                    voltages.append(str(m.get("electricalMachineVoltageMeasure", "")))
                    powers.append(str(m.get("electricMotorPowerMeasure", "")))

                data["–≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = ";\n".join(marks_types)
                data["–í–∏–¥ —ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω—ã"] = ";\n".join(kinds)
                data["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"] = ";\n".join(voltages)
                data["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (—ç–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞)"] = ";\n".join(powers)

                # üëâ –ê —ç—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏
                data["–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è"] = None
                data["–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –í"] = None
                data["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 30-–º–∏–Ω—É—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç"] = None

        else:
            print("‚ö†Ô∏è –≠–ª–µ–∫—Ç—Ä–æ–º–∞—à–∏–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

        # === –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ ===
        storage = get_json("getPowerStorageDeviceDetailsByDocId", doc_id)
        storage_list = storage.get("powerStorageDeviceDetails", []) if storage else []

        if storage_list:
            storage_items = []
            for s in storage_list:
                kind = s.get("powerStorageDeviceTypeName", "")
                desc = s.get("powerStorageDeviceDescription", "")
                full = kind if not desc or desc == "-" else f"{kind} ({desc})"
                storage_items.append(full)
            data["–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏"] = ";\n".join(storage_items)
        else:
            print("‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")


        layout_details = get_json("GetVehicleLayoutDetailsByDocId", doc_id)
        if layout_details:
            if layout_details.get("vehicleCarriageSpaceImplementations"):
                data["–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)"] = \
                    layout_details["vehicleCarriageSpaceImplementations"][0].get("carriageSpaceImplementation")
            if layout_details.get("vehicleCabins"):
                data["–ö–∞–±–∏–Ω–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ N)"] = \
                    layout_details["vehicleCabins"][0].get("cabinDescription")

                # üÜï –ü–ê–°–°–ê–ñ–ò–†–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
            if layout_details.get("vehiclePassengerQuantities"):
                passenger_info = layout_details["vehiclePassengerQuantities"][0]
                quantity = passenger_info.get("passengerQuantity")
                if quantity:
                    data["–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, –ú3)"] = quantity
                else:
                    print("‚ö†Ô∏è –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞, –Ω–æ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.")
            else:
                print("‚ö†Ô∏è –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")


        # === –†–∞–º–∞ (–¥–ª—è –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L) ===
        frames = get_json("GetVehicleLayoutDetailsByDocId", doc_id)
        if frames and frames.get("vehicleFrames"):
            frame_text = frames["vehicleFrames"][0].get("frameText")
            if frame_text:
                data["–†–∞–º–∞ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ L)"] = frame_text
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–º–∞: {frame_text}")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–º–µ (vehicleFrames –ø—É—Å—Ç–æ–π).")


        # === –°—Ü–µ–ø–ª–µ–Ω–∏–µ ===
        clutch = get_json("GetVehicleClutchDetailsByDocId", doc_id)
        if clutch and clutch.get("vehicleClutchDetails"):
            data["–°—Ü–µ–ø–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = clutch["vehicleClutchDetails"][0].get("vehicleClutchDescription")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ü–µ–ø–ª–µ–Ω–∏—é.")


        # === –ë–ª–æ–∫ –¢–†–ê–ù–°–ú–ò–°–°–ò–ò —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–¥—É–∫—Ç–æ—Ä–æ–≤ ===
        transmission = get_json("GetTransmissionTypesByDocId", doc_id)
        if transmission and transmission.get("vehicleTransmissionTypes"):
            t = transmission["vehicleTransmissionTypes"][0]
            data["–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"] = t.get("transTypeName")

            # –ù–æ–≤—ã–π –±–ª–æ–∫: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥—É–∫—Ç–æ—Ä–æ–≤ –∏ –∫–æ—Ä–æ–±–æ–∫
            if t.get("transmissionUnitDetails"):
                reducers = []  # —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–¥—É–∫—Ç–æ—Ä–æ–≤
                gearboxes = []  # —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∫–æ—Ä–æ–±–æ–∫ –ø–µ—Ä–µ–¥–∞—á

                for unit in t["transmissionUnitDetails"]:
                    kind = (unit.get("unitKindName") or "").lower()
                    desc = (unit.get("transmissionUnitMakeName") or "").strip()
                    box_type = (unit.get("transmissionBoxTypeName") or "").strip()

                    if "—Ä–µ–¥—É–∫—Ç–æ—Ä" in kind:
                        # –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å—Ç—å ‚Äî –±–µ—Ä—ë–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–æ "–†–µ–¥—É–∫—Ç–æ—Ä"
                        reducers.append(desc if desc else "–†–µ–¥—É–∫—Ç–æ—Ä")

                    elif "–∫–æ—Ä–æ–±–∫–∞" in kind:
                        # –µ—Å–ª–∏ –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á
                        if desc:
                            gearboxes.append(desc)
                        elif box_type:
                            gearboxes.append(box_type)

                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if reducers:
                    data["–†–µ–¥—É–∫—Ç–æ—Ä"] = ";\n".join(reducers)
                if gearboxes:
                    data["–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = ";\n".join(gearboxes)
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏.")

        def safe_get(endpoint, key, subkey=None, index=0):
            res = get_json(endpoint, doc_id)
            val = res.get(key, [])
            if val and len(val) > index:
                return val[index].get(subkey) if subkey else val[index]
            return None

        # === –í–°–¢–ê–í–õ–Ø–ï–ú –ë–õ–û–ö seats –ó–î–ï–°–¨ ===
        # === –ë–õ–û–ö –°–ò–î–ï–ù–ò–ô (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π) ===
  # === –ë–õ–û–ö –°–ò–î–ï–ù–ò–ô (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ä—è–¥–æ–≤) ===
        seats = get_json("GetVehicleSeatDetailsByDocId", doc_id)
        if isinstance(seats, list) and seats:
            seat_info = seats[0]
            total_seats = seat_info.get("seatQuantity")
            description = (seat_info.get("seatDescription") or "").strip()

            if total_seats:
                data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ú2, M3, L)"] = total_seats

            raw_details = seat_info.get("vehicleSeatRawDetails", [])
            row_list = []

            for seat in raw_details:
                ordinal = seat.get("seatRawOrdinal")
                quantity = seat.get("seatRawQuantity")
                if ordinal is not None and quantity is not None:
                    row_list.append(f"{ordinal}-{quantity}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            final_parts = []
            if total_seats:
                final_parts.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è: {total_seats}")
            if description:
                final_parts.append(f"–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç –¥–ª—è —Å–∏–¥–µ–Ω–∏—è: {description}")
            if row_list:
                final_parts.append("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/—Å–∑–∞–¥–∏:\n" + "\n".join(row_list))

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Å–ø–µ—Ä–µ–¥–∏/ c–∑–∞–¥–∏ (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)"] = "\n".join(final_parts)
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–¥–µ–Ω—å—è—Ö.")



        # üëá –î–∞–ª–µ–µ –∏–¥—ë—Ç engine, layout, suspension –∏ —Ç.–¥.


        engine = get_json("GetEngineDetailsByDocId", doc_id)
        if engine and engine.get("engineDetails"):
            e = engine["engineDetails"][0]
            data["–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≥–æ—Ä–∞–Ω–∏—è (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = f"{e.get('vehicleComponentMakeName', '')}, {e.get('vehicleComponentText', '')}".strip(', ')
            data["- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤"] = f"{e.get('engineCylinderQuantity')} {e.get('engineCylinderArrangementName')}"
            data["- —Ä–∞–±–æ—á–∏–π –æ–±—ä–µ–º —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, —Å–º3"] = e.get("engineCapacityMeasure")
            data["- —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è"] = e.get("engineCompressionRate")
            if e.get("enginePowerDetails"):
                p = e["enginePowerDetails"][0]
                data["- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç (–º–∏–Ω.-1)"] = f"{p.get('engineMaxPowerMeasure')} @ {p.get('engineMaxPowerShaftRotationFrequencyMinMeasure')}"
            if e.get("vehicleFuelKinds"):
                data["–¢–æ–ø–ª–∏–≤–æ"] = e["vehicleFuelKinds"][0].get("fuelKindName")
            if e.get("engineFuelFeedDetails"):
                data["–°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–∞–Ω–∏—è (—Ç–∏–ø)"] = e["engineFuelFeedDetails"][0].get("fuelFeedName")
            if e.get("vehicleIgnitionDetails"):
                data["–°–∏—Å—Ç–µ–º–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è (—Ç–∏–ø)"] = e["vehicleIgnitionDetails"][0].get("vehicleIgnitionTypeName")
            if e.get("exhaustDetails"):
                data["–°–∏—Å—Ç–µ–º–∞ –≤—ã–ø—É—Å–∫–∞ –∏ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –≥–∞–∑–æ–≤"] = e["exhaustDetails"][0].get("exhaustDescription")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–≤–∏–≥–∞—Ç–µ–ª—é.")


        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–µ—Å—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        weight =get_json("GetVehicleWeightDetailsByDocId", doc_id)

        if weight is None:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å GetVehicleWeightDetailsByDocId")
        elif "vehicleWeightMeasures" not in weight:
            print("‚ö†Ô∏è –ù–µ—Ç vehicleWeightMeasures –≤ –æ—Ç–≤–µ—Ç–µ.")
        else:
            for w in weight["vehicleWeightMeasures"]:
                mass_type = w.get("massTypeName", "").lower()
                if "—Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º" in mass_type:
                    data["–ú–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–≥"] = w.get("weight")
                    print(f"‚úÖ –ú–∞—Å—Å–∞ –≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {w.get('weight')}")
                if "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è" in mass_type:
                    data["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–≥"] = w.get("weight")
                    print(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞: {w.get('weight')}")


        dimensions = get_json("GetVehicleDimensionDetailsByDocId", doc_id)
        if dimensions.get("lengthRanges"):
            data["–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"]["–¥–ª–∏–Ω–∞"] = dimensions["lengthRanges"][0].get("length")
        if dimensions.get("widthRanges"):
            data["–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"]["—à–∏—Ä–∏–Ω–∞"] = dimensions["widthRanges"][0].get("width")
        height = get_json("GetVehicleHightDetailsByDocId", doc_id)
        if height.get("heightRanges"):
            data["–ì–∞–±–∞—Ä–∏—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –º–º"]["–≤—ã—Å–æ—Ç–∞"] = height["heightRanges"][0].get("height")

        wheelbase = get_json("GetWheelbaseMeasuresByDocId", doc_id)
        if wheelbase.get("wheelbaseMeasureRanges"):
            values = [str(i.get("wheelbase")) for i in wheelbase["wheelbaseMeasureRanges"] if i.get("wheelbase")]
            data["–ë–∞–∑–∞, –º–º"] = " / ".join(values)


        # === –ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º ===
        axle_details = get_json("GetVehicleAxleDetailsByDocId", doc_id)
        seat_details = get_json("GetVehicleSeatDetailsByDocId", doc_id)

        parts = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–º–æ—Ç–æ—Ü–∏–∫–ª –∏–ª–∏ –Ω–µ—Ç)
        is_motorcycle = (data.get("–ö–ê–¢–ï–ì–û–†–ò–Ø") or "").startswith("L")

        if is_motorcycle:
            # –î–ª—è –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤
            if isinstance(seat_details, list) and seat_details:
                seat_info = seat_details[0]
                raws = seat_info.get("vehicleSeatRawDetails", [])

                # –ò—â–µ–º –≤–µ–¥—É—â—É—é –æ—Å—å
                leading_axle = None
                if axle_details and axle_details.get("vehicleAxleDetails"):
                    for axle in axle_details["vehicleAxleDetails"]:
                        if axle.get("drivingAxleIndicator") == 1:
                            leading_axle = axle.get("axleOrdinal")

                for raw in raws:
                    ordinal = raw.get("seatRawOrdinal")
                    if ordinal is not None:
                        label = f"–û—Å—å {ordinal}"
                        if ordinal == leading_axle:
                            label += " (–≤–µ–¥—É—â–∞—è)"
                        parts.append(label)
        else:
            # –î–ª—è –º–∞—à–∏–Ω
            if axle_details and axle_details.get("vehicleAxleDetails"):
                for a in axle_details["vehicleAxleDetails"]:
                    measure = a.get("axleSweptPathMeasure")
                    if measure is not None:
                        label = f"{measure} –º–º"
                        if a.get("drivingAxleIndicator") == 1:
                            label += " (–≤–µ–¥—É—â–∞—è)"
                        parts.append(label)

        if parts:
            data["–ö–æ–ª–µ—è –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å, –º–º"] = " / ".join(parts)
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–µ–∏ –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª–µ—Å.")




        layout = get_json("GetVehicleLayoutsByDocId", doc_id)
        if layout and layout.get("vehicleLayoutPatterns"):
            data["–°—Ö–µ–º–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"] = layout["vehicleLayoutPatterns"][0].get("layoutPatternName")


        suspension = get_json("GetVehicleSuspensionDetailsByDocId", doc_id)
        if suspension and suspension.get("vehicleSuspensionDetails"):
            for s in suspension["vehicleSuspensionDetails"]:
                kind = s.get("vehicleSuspensionKindName", "").lower()
                desc = s.get("vehicleSuspensionDescription")
                if not desc:
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–¥–Ω—è—è/–∑–∞–¥–Ω—è—è
                if "1" in kind or "–ø–µ—Ä–µ–¥–Ω" in kind:
                    key = "–ø–µ—Ä–µ–¥–Ω—è—è"
                elif any(x in kind for x in ["2", "3", "4", "–∑–∞–¥–Ω"]):
                    key = "–∑–∞–¥–Ω—è—è"
                else:
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º —Å –ø–æ–¥–ø–∏—Å—å—é –æ—Å–∏
                line = f"{s.get('vehicleSuspensionKindName')}: {desc}"

                if data["–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"].get(key):
                    data["–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"][key] += "; " + line
                else:
                    data["–ü–æ–¥–≤–µ—Å–∫–∞(—Ç–∏–ø)"][key] = line
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–¥–≤–µ—Å–∫–µ.")



        running_gear = get_json("GetVehicleRunningGearDetailsByDocId", doc_id)
        if running_gear:
            gear = running_gear[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            formula = gear.get("vehicleWheelFormulaName")
            drive = (gear.get("poweredWheelLocations") or [{}])[0].get("wheelLocationName")
            if formula or drive:
                data["–ö–æ–ª–µ—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞/–≤–µ–¥—É—â–∏–µ –∫–æ–ª–µ—Å–∞"] = f"{formula or ''}, {drive or ''}".strip(', ')

            # –ù–æ–≤–æ–µ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π –∏ –∫–æ–ª—ë—Å –¥–ª—è –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            axle_qty = gear.get("vehicleAxleQuantity")
            wheel_qty = gear.get("vehicleWheelQuantity")
            if axle_qty and wheel_qty:
                data["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π/–∫–æ–ª–µ—Å (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û)"] = f"{axle_qty} / {wheel_qty}"
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ö–æ–¥–æ–≤–æ–π —á–∞—Å—Ç–∏ (running gear).")


        bodywork = get_json("GetVehicleBodyworkDetailsByDocId", doc_id)
        if bodywork:
            bw = bodywork[0]
            bw_type = bw.get("vehicleBodyWorkTypeName")
            doors = bw.get("doorQuantity")
            if bw_type or doors:
                data["–¢–∏–ø –∫—É–∑–æ–≤–∞/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ú1)"] = f"{bw_type or ''} / {doors or ''}".strip(' /')


        steering = get_json("GetVehicleSteeringDetailsByDocId", doc_id)
        if steering.get("vehicleSteeringDescriptions"):
            data["–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Ä–∫–∞, —Ç–∏–ø)"] = steering["vehicleSteeringDescriptions"][0].get("description")

        brakes = get_json("GetVehicleBrakingSystemDetailsByDocId", doc_id)
        for b in brakes.get("vehicleBrakingSystemDetails", []):
            kind = b.get("vehicleBrakingSystemKindName", "").lower()
            if kind in data["–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)"]:
                data["–¢–æ—Ä–º–æ–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (—Ç–∏–ø)"][kind] = b.get("vehicleBrakingSystemDescription")

            # === –®–∏–Ω—ã ===
        tyres = get_json("GetVehicleTyreKindInfosByDocId", doc_id)
        if tyres and tyres.get("vehicleTyreKindInfos"):
            tyre_list = tyres["vehicleTyreKindInfos"]
            sizes = []
            for tyre in tyre_list:
                size = tyre.get("vehicleTyreKindSize")
                if size:
                    sizes.append(size.strip())
            
            if sizes:
                data["–®–∏–Ω—ã"] = ";\n".join(sizes)  # –†–∞–∑–¥–µ–ª–∏—Ç—å —à–∏–Ω—ã —á–µ—Ä–µ–∑ ; –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            else:
                print("‚ö†Ô∏è –†–∞–∑–º–µ—Ä—ã —à–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∏–Ω–∞–º.")

        extras = get_json("GetVehicleEquipmentInfosByDocId", doc_id)
        if extras.get("vehicleEquipmentInfos"):
            data["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"] = extras["vehicleEquipmentInfos"][0].get("vehicleEquipmentText")

    return data

# === –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º!
    token, cookies = load_auth_from_cache()
    if not token or not validate_token(token, cookies):
        print("üîÅ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...")
        token, cookies = get_token_and_cookies_via_selenium()
        save_auth_to_cache(token, cookies)
    else:
        print("üîí –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω.")

    import json
    input_url = input("–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¢–°: ").strip()
    result = parse_vehicle_data_from_url(input_url)

    print(json.dumps(result, ensure_ascii=False, indent=2))

    output_dir = "test"
    os.makedirs(output_dir, exist_ok=True)
    output_path = os.path.join(output_dir, "site_data.json")
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_path}")